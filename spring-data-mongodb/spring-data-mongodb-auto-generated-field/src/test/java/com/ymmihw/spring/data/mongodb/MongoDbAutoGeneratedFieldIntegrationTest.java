package com.ymmihw.spring.data.mongodb;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.ymmihw.spring.data.mongodb.MongoDbAutoGeneratedFieldIntegrationTest.MongoClientDockerConfig;
import com.ymmihw.spring.data.mongodb.config.MongoClientConfig;
import com.ymmihw.spring.data.mongodb.model.User;
import com.ymmihw.spring.data.mongodb.repository.UserRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.ComponentScan.Filter;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.FilterType;
import org.springframework.test.context.ContextConfiguration;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import static org.assertj.core.api.Assertions.assertThat;


@SpringBootTest
@Testcontainers
@ContextConfiguration(classes = {MongoClientDockerConfig.class})
public class MongoDbAutoGeneratedFieldIntegrationTest {
  @Container
  public static MongoContainer container = MongoContainer.getInstance();

  @Configuration
  @ComponentScan(basePackages = "com.ymmihw.spring.data.mongodb",
      excludeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE,
          classes = {Application.class, MongoClientConfig.class}))
  public static class MongoClientDockerConfig {
    @Bean
    public MongoClient mongo() throws Exception {
      MongoClient client = MongoClients.create(
          "mongodb://" + container.getContainerIpAddress() + ":" + container.getFirstMappedPort());
      return client;
    }
  }

  @Autowired
  UserRepository userRepository;

  @Test
  public void contextLoads() {}

  @Test
  public void givenUserObject_whenSave_thenCreateNewUser() {

    User user = new User();
    user.setFirstName("John");
    user.setLastName("Doe");
    user.setEmail("john.doe@example.com");
    userRepository.save(user);

    assertThat(userRepository.findAll().size()).isGreaterThan(0);
  }

}
